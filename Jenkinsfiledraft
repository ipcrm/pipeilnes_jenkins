#!groovy
import groovy.json.JsonOutput
import groovy.json.JsonSlurper

def DISTELLI_USERNAME = 'ipcrm'
def DISTELLI_API_URL  = "https://api.distelli.com/$DISTELLI_USERNAME"
def DISTELLI_APP_NAME = "pipelines_jenkins"

PIPELINES_API_TOKEN='ibmmox8a2mspxs5lzh3ozhwe9xyq0smslsmmg' //BAD!

def PIPEILNES_PUSH_EVENT_ID = ''
def PIPEILNES_BUILD_EVENT_ID = ''


node('pipelines') {
  checkout(scm).each { k,v -> env.setProperty(k, v) }
  env.GIT_AUTHOR_NAME = sh(returnStdout: true, script: "git --no-pager show -s --format='%an'").trim()
  def DISTELLI_CHANGE_TITLE = sh(returnStdout: true, script: 'git --no-pager log --pretty=format:"%s" -1')
  def DISTELLI_BUILD_ID = env.BUILD_NUMBER
  def DISTELLI_BUILD_URL= env.BUILD_URL
  def DISTELLI_CHANGE_URL = env.GIT_URL
  def DISTELLI_CHANGE_AUTHOR = env.GIT_AUTHOR_NAME
  def DISTELLI_CHANGE_AUTHOR_DISPLAY_NAME = env.GIT_AUTHOR_NAME
  def DISTELLI_CHANGE_ID = env.GIT_COMMIT
  def DISTELLI_BRANCH_NAME = env.GIT_BRANCH
  def DISTELLI_CHANGE_TARGET = env.GIT_URL

  stage('Create Push Event'){
    def pipeargs = "apps/${DISTELLI_APP_NAME}/events/pushEvent?apiToken=${PIPELINES_API_TOKEN}"
    def data = [:]
    data['author_username'] = DISTELLI_CHANGE_AUTHOR
    data['author_name'] = DISTELLI_CHANGE_AUTHOR_DISPLAY_NAME
    data['commit_msg'] = DISTELLI_CHANGE_TITLE 
    data['commit_url'] = DISTELLI_CHANGE_URL
    data['commit_id'] = DISTELLI_CHANGE_ID 
    data['repo_url'] = DISTELLI_CHANGE_TARGET
    data['branch'] = DISTELLI_BRANCH_NAME

    PIPEILNES_PUSH_EVENT_ID = pushData('PUT',DISTELLI_API_URL,pipeargs,data)['event_id']
  }

  stage('Create Build Event'){
    try {
      def DISTELLI_NOW = sh(returnStdout: true, script: 'date -u +%Y-%m-%dT%H:%M:%S.0Z')
      def data = [:]
      data["build_status"] = 'running'
      data["build_start"] = DISTELLI_NOW
      data["build_id"] = DISTELLI_BUILD_ID
      data["build_provider"] = 'jenkins'
      data["build_url"] = DISTELLI_BUILD_URL
      data["repo_url"] = DISTELLI_CHANGE_TARGET 
      data["commit_url"] = DISTELLI_CHANGE_URL
      data["author_username"] = DISTELLI_CHANGE_AUTHOR
      data["author_name"] = DISTELLI_CHANGE_AUTHOR_DISPLAY_NAME
      data["commit_msg"] = DISTELLI_CHANGE_TITLE
      data["commit_id"] = DISTELLI_CHANGE_ID
      data["branch"] = DISTELLI_BRANCH_NAME
      data["parent_event_id"] = PIPEILNES_EVENT_ID
      
      def pipeargs = "apps/${DISTELLI_APP_NAME}/events/buildEvent?apiToken=${PIPELINES_API_TOKEN}"
      PIPEILNES_BUILD_EVENT_ID = pushData('PUT',DISTELLI_API_URL,pipeargs,data)['event_id']

      // Customer Code
      //  Compile XYZ
      //  Package XYZ
      //  - Distelli Manifest, PkgInclude: *XYZ Artifacts*
      // End of Customer Code

      sh('distelli push -save-release release_version.out')
      DISTELLI_NOW = sh(returnStdout: true, script: 'date -u +%Y-%m-%dT%H:%M:%S.0Z')

      def eventdata = [:]
      eventdata['build_status'] = 'Succeeded'
      eventdata['build_end'] = DISTELLI_NOW
      eventdata['release_version'] = sh(returnStdout: true, script:'cat release_version.out')

      def eventargs = "apps/${DISTELLI_APP_NAME}/events/${DISTELLI_BUILD_EVENT_ID}?apiToken=${PIPELINES_API_TOKEN}"
      pushData('POST',DISTELLI_API_URL,eventargs,eventdata)

    } catch (all) {
        def DISTELLI_NOW = sh(returnStdout: true, script: 'date -u +%Y-%m-%dT%H:%M:%S.0Z')

        def eventdata = [:]
        eventdata['build_status'] = 'Failed'
        eventdata['build_end'] = DISTELLI_NOW

        def eventargs = "apps/${DISTELLI_APP_NAME}/events/${DISTELLI_BUILD_EVENT_ID}?apiToken=${PIPELINES_API_TOKEN}"
        pushData('POST',DISTELLI_API_URL,eventargs,eventdata)
      }
    }
}

def pushData (method,baseurl,args,payload) {
  def jsonSlurper = new JsonSlurper()
  try {
    def fullurl = "${baseurl}/${args}"
    def post = new URL(fullurl).openConnection();
    post.setRequestMethod(method)
    post.setDoOutput(true)
    post.setRequestProperty("Content-Type", "application/json")
    post.getOutputStream().write(JsonOutput.toJson(payload).getBytes("UTF-8"));
    def postRC = post.getResponseCode();
    if(postRC.equals(200)) {
      def object = jsonSlurper.parseText(post.getInputStream().getText());
      return object
    }else{
      throw "POST to ${baseurl} failed! Response code ${postRC.toString()}"
    }
  } catch (Exception e) {
    throw e
  }
}